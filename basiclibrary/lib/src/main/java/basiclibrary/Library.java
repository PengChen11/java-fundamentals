/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;
import java.lang.Math;
import java.util.*;

public class Library {
    public static void main(String[] args){
        List<String> votes = new ArrayList<String>();
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Shrub");
        votes.add("Hedge");
        votes.add("Shrub");
        votes.add("Bush");
        votes.add("Hedge");
        votes.add("Bush");

        String winner = tally(votes);
        System.out.println(winner + " received the most votes!");
    }
    public static int[] roll (int n) {
        int[] result = new int[n];
        for (int i = 0; i < n; i++){
            result[i] = rollOnce();
        }
        return result;
    }

    public static boolean containsDuplicates(int[] arr) {
        boolean result = false;
        HashMap<Integer, Integer> store = new HashMap<>();

        for (int i = 0; i < arr.length; i++) {
            boolean isKeyPresent= store.containsKey(arr[i]);
            if (!isKeyPresent){
                store.put(arr[i], arr[i]);
            } else {
                result = true;
                break;
            }
        }
        return result;
    }

    public static double calculateAverages(int[] arr){
        return Arrays.stream(arr).average().orElse(Double.NaN);
    }

    public static int[] getLowestAvgArr(int[][] arr){
        int[] result = new int[7];
        double lowestAvgNum = 0;

        for (int[] innerArr:  arr) {
            double averageNum = calculateAverages(innerArr);
            if (lowestAvgNum == 0){
                lowestAvgNum = averageNum;
            }
            if (averageNum < lowestAvgNum){
                lowestAvgNum = averageNum;
                result = innerArr;
            }
        }

        return result;
    }

    public static String analyzeWeatherData (int[][] data) {
        Integer low = null;
        Integer high = null;
        HashSet<Integer> tempSet= new HashSet<>();


        for (int[] week : data){
            for (int day : week){
                if (low == null || day < low) low = day;
                if (high == null || day > high) high = day;
                tempSet.add(day);
            }
        }

        String newLine = System.getProperty("line.separator");
        String result = "High: " + high
                + newLine
                + "Low: " + low;
        for (int i = low+1; i<high; i++){
            if ( !tempSet.contains(i)){
                result = result.concat(newLine+ "Never saw temperature: " + i);
            }
        }
        System.out.println(result);
        return result;
    }

    public static String tally ( List list ){
        String maxVote = null;
        int highestVote =0;
        HashMap<String, Integer> voteMap = new HashMap<>();

        Iterator<String> iterator = list.iterator();
        while(iterator.hasNext()) {
            String item = iterator.next();
            if (!voteMap.containsKey(item)) {
                voteMap.put(item, 1);
                if (highestVote < 1) maxVote = item;
            } else {
                Integer count = voteMap.get(item);
                voteMap.put(item, count + 1);
                if ( highestVote < count + 1) maxVote = item;
            }
        }
        return maxVote;
    }

    private static int rollOnce(){
        // define the range
        int max = 6;
        int min = 1;
        int range = max - min + 1;
        int rand = (int)(Math.random() * range) + min;
        return rand;
    }

}
